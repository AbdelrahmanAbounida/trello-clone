
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole{
  USER 
  ADMIN 
}

model Account {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  userId             String @db.ObjectId
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.String
  access_token       String?  @db.String
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.String
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
}

model User {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String   @unique
  emailVerified DateTime?
  hashedPassword String?
  image         String?
  accounts      Account[]
  sessions      Session[]
  workspaces UserSOnWorkspace[] 
  comments Comment[] 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Session {
  id  String  @id @default(auto()) @map("_id")  @db.ObjectId
  sessionToken String   @unique
  userId       String @db.ObjectId
  expires      DateTime
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// VerificationRequest
model VerificationToken {
  id  String  @id @default(auto()) @map("_id")  @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Workspace {
  id  String  @id @default(auto()) @map("_id")  @db.ObjectId
  name String  @unique
  boards Board[]
  activities Activity[]
  users UserSOnWorkspace[] 
  ownerId String @db.ObjectId
  logo String?
}
// many to many with user 
model UserSOnWorkspace {
  id  String  @id @default(auto()) @map("_id")  @db.ObjectId
  workspace       Workspace     @relation(fields: [workspaceId], references: [id])
  workspaceId     String @db.ObjectId 
  user   User @relation(fields: [userId], references: [id])
  userId     String @db.ObjectId 
  role UserRole
}

model Board {
  id  String  @id @default(auto()) @map("_id")  @db.ObjectId
  workspaceId String @db.ObjectId 
  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  title String 
  is_public Boolean 
  backgroundImage String?
  columns Column[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
model Column {
  id  String  @id @default(auto()) @map("_id")  @db.ObjectId
  boardId String @db.ObjectId
  board Board @relation(fields: [boardId],references: [id], onDelete: Cascade)
  title String 
  position Int @default(0)
  tasks Task[] 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Task {
  id  String  @id @default(auto()) @map("_id")  @db.ObjectId
  title String 
  description String?
  position Int
  columnId String @db.ObjectId
  column Column @relation(fields: [columnId],references: [id], onDelete: Cascade)
  comments Comment[] 
  activities TaskActivity[] 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Comment {
  id  String  @id @default(auto()) @map("_id")  @db.ObjectId
  userId String @db.ObjectId
  taskId String @db.ObjectId 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  task Task @relation(fields: [taskId], references: [id], onDelete: Cascade)
  content String 
  createdAt DateTime @default(now())
}

model Activity {
  id  String  @id @default(auto()) @map("_id")  @db.ObjectId
  content String 
  workspaceId String @db.ObjectId  
  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}

model TaskActivity {
  id  String  @id @default(auto()) @map("_id")  @db.ObjectId
  content String 
  taskId String @db.ObjectId
  task Task @relation(fields: [taskId],references: [id])
}


// ::TODO:: stripe user 
